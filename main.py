import asyncio
import logging

import aiogram.exceptions
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from models import sort_by_data, send_data, categoty, time_count
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold
from keyboard import keyb, approve_kb, choose_kb, calendar_kb, reply_kb, my_kb, prove_kb, reminder_kb, category_kb, \
    category_choice_kb, check_kb
from airtable import change_user_info, add_user, add_item_found, change_item_info, add_dop, get_item, approve_item, delet_id
import datetime


# Bot token can be obtained via https://t.me/BotFather
TOKEN = "7081007147:AAFx8B6HBYQ-o88bNjJbgwPKucbo-dw1vuA"

# TOKEN = '8016908103:AAHV97jBuqlbPb3ehisB6Way0obvZGq71NE'

# All handlers should be attached to the Router (or Dispatcher)
dp = Dispatcher()
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)

chat_id = -1002253542233


async def on_startup(_):
    print('–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω')


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:

    """
    This handler receives messages with `/start` command
    """
    chat_type = message.chat.type  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if chat_type == "private":
        logging.info(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}')
        add_user(message.from_user.id, message.from_user.username)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç üëãüèΩ, {hbold(message.from_user.full_name)}! "
                             f"\n"
                             f"—è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–µ—â–µ–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ—é –ø–æ—Ç–µ—Ä—è—à–∫—É –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–µ—â—å –≤–ª–∞–¥–µ–ª—å—Ü—É",
                             reply_markup=keyb())


@dp.message(F.text.lower() == '—è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–µ-—á—Ç–æ')
async def approve(message: Message):
    logging.info(f"–Ω–∞—á–∞—Ç –ø–æ–∏—Å–∫ {message.from_user.id}")
    add_dop('—è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–µ-—á—Ç–æ')
    change_user_info({'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': str(message.from_user.id),
                      '–ò—Å–∫–∞–ª –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª': "–ø–æ—Ç–µ—Ä—è–ª",
                      '–∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑': str(datetime.date.today()),
                      '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞': str(datetime.datetime.now())})

    try:
        answer = ('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤–µ—â—å:\n\n'
                  '–ü–æ –¥–∞—Ç–µ: –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ—â–∏, –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã\n'
                  '–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É: –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å–µ –≤–µ—â–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n'
                  "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
        await message.answer(answer, reply_markup=choose_kb())
    except Exception as e:
        logging.error(e)
        await message.answer('problem')


class Form(StatesGroup):
    found_what = State()
    found_where = State()
    found_when = State()
    item_location = State()
    who_find = State()
    photo = State()
    category = State()
    confirmation = State()


# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É "—è –Ω–∞—à–µ–ª –∫–æ–µ-—á—Ç–æ"


@dp.message(F.text.lower() == "—è –Ω–∞—à–µ–ª –∫–æ–µ-—á—Ç–æ")
async def found_start(message: Message, state: FSMContext):
    if await state.get_state():
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    logging.info(f"—Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ {message.from_user.id}")
    add_dop("—è –Ω–∞—à–µ–ª –∫–æ–µ-—á—Ç–æ")
    change_user_info({'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': str(message.from_user.id), '–ò—Å–∫–∞–ª –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª': "–Ω–∞—à–µ–ª",
                      '–∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑': str(datetime.date.today()),
                      '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞': str(datetime.datetime.now())})
    await state.set_state(Form.found_what)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–ß—Ç–æ —Ç—ã –Ω–∞—à–µ–ª? –ù–∞–ø–∏—à–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç.")  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å


@dp.message(Form.found_what)
async def process_found_where(message: Message, state: FSMContext):
    await state.update_data(found_what=message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await state.set_state(Form.found_where)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–ì–¥–µ –Ω–∞—à–µ–ª? –ì–¥–µ –≤–µ—â—å –±—ã–ª–∞? –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –∫–æ—Ä–ø—É—Å.")  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π


@dp.message(Form.found_where)
async def process_found_where(message: Message, state: FSMContext):
    await state.update_data(found_where=message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await state.set_state(Form.found_when)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–ö–æ–≥–¥–∞ —Ç—ã –Ω–∞—à–µ–ª?", reply_markup=reply_kb())  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞–µ–º —Ç—Ä–µ—Ç–∏–π


@dp.message(Form.found_when)
async def process_found_when(message: Message, state: FSMContext):
    await state.update_data(found_when=f"{str(datetime.date.today())[0:7]}-{message.text}")  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await state.set_state(Form.item_location)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–ì–¥–µ —Ç—ã –µ—ë –æ—Å—Ç–∞–≤–∏–ª/–æ—Å—Ç–∞–≤–∏—à—å?\n"
                         "<b>–û–±—ã—á–Ω–æ –≤–µ—â–∏ –æ—Å—Ç–∞–≤–ª—è—é—Ç –Ω–∞ –ø—É–Ω–∫—Ç–∞—Ö –æ—Ö—Ä–∞–Ω—ã. –ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å —Ç–∞–∫, —Ç–æ –Ω–µ –∑–∞–±—É–¥—å "
                         "—É—Ç–æ—á–Ω–∏—Ç—å –æ –∫–∞–∫–æ–º –ø—É–Ω–∫—Ç–µ –æ—Ö—Ä–∞–Ω—ã –∏–¥–µ—Ç —Ä–µ—á—å.</b>", reply_markup=ReplyKeyboardRemove())  # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å


@dp.message(Form.item_location)
async def process_who_find(message: Message, state: FSMContext):
    await state.update_data(item_location=message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await state.set_state(Form.category)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–µ—â—å", reply_markup=category_choice_kb())


@dp.message(Form.category)
async def process_who_find(message: Message, state: FSMContext):
    await state.update_data(category=message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await state.set_state(Form.photo)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π –≤–µ—â–∏.\n"
                         "–ï—Å–ª–∏ —Ñ–æ—Ç–∫–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())


@dp.message(Form.photo)
async def process_photo(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
    try:
        photo_id = message.photo[-1].file_id
        await state.update_data(photo=photo_id)
        await state.set_state(Form.who_find)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    except TypeError as e:
        logging.error(e)
        photo_id = 'AgACAgIAAxkBAAII_WdFcPzVuEMQMpbV0CFC_Ad8uJ65AAIC4jEb4dwxStxLfUuUDk_QAQADAgADeQADNgQ'
        await state.update_data(photo=photo_id)
        await state.set_state(Form.who_find)
        await message.answer('–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
    await message.answer("–ö—Ç–æ —Ç—ã? –¢—É—Ç –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è")
# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã


@dp.message(Form.who_find)
async def process_item_location(message: Message, state: FSMContext):
    await state.update_data(who_find=message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞
    user_data = await state.get_data()
    response = (
        f"–ò—Ç–∞–∫, —Ç—ã –Ω–∞—à–µ–ª - {user_data['found_what']}:\n"
        f"–ì–¥–µ: {user_data['found_where']}\n"
        f"–ö–æ–≥–¥–∞: {user_data['found_when']}\n"
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['item_location']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–µ—â–∏: {user_data['category']}\n"
        f"–ö—Ç–æ –Ω–∞—à–µ–ª: {user_data['who_find']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category']}\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    await message.answer_photo(user_data['photo'], caption=response, reply_markup=approve_kb())
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.set_state(Form.confirmation)


@dp.message(Form.confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        try:
            user_data = await state.get_data()
            r = []
            if user_data['found_when'].lower() == '—Å–µ–≥–æ–¥–Ω—è':
                r.append(datetime.date.today())
            change_user_info({'–ò–º—è': user_data['who_find'], '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': str(message.from_user.id)})
            add_item_found({
                '–í–µ—â—å': user_data["found_what"],
                '–ì–¥–µ': user_data['found_where'],
                '–ö–æ–≥–¥–∞': user_data['found_when'],
                '–ì–¥–µ —Å–µ–π—á–∞—Å': user_data['item_location'],
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': message.from_user.id,
                'PHOTO': user_data['photo'],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': user_data['category']})
            time_count(message.from_user.id)
            await message.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", reply_markup=keyb())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            add_dop("–ó–∞—è–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞")
            logging.info(f"–∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ {message.from_user.id}")
            await bot.send_message(chat_id=chat_id, text='–Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏—à–ª–∞')
            try:
                text = "–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–¥–µ–ª–µ–Ω—ã —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º\n"\
                       f"–ü–æ—Ç–µ—Ä—è—à–∫–∞: <b>{user_data['found_what']}</b>" \
                       f"\n–ë—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ <b>{user_data['found_where']}</b> —á–∏—Å–ª–æ <b>{user_data['found_when']}</b>" \
                       f"\n–ù–∞—à–µ–ª –µ—ë <b>{user_data['who_find']}</b> - –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ø–æ –ø–æ–≤–æ–¥—É –≤–µ—â–∏ –≤ –õ–° <b>@{message.from_user.username}</b> " \
                       f"\n–°–µ–π—á–∞—Å –ø–æ—Ç–µ—Ä—è—à–∫–∞ –≤ <b>{user_data['item_location']}</b>" \
                       f'\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - <b>{user_data["category"]}</b>'
            except Exception as e:
                logging.error(e)
                text = '–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞, –Ω–æ —è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –º–æ–≥—É –µ—ë –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–¥–µ—Å—å. –ó–∞–Ω–µ—Å –µ—ë –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
            # await bot.send_message(chat_id=chat_id, text=text)
            await bot.send_photo(chat_id=chat_id, photo=user_data['photo'], caption=text, reply_markup=check_kb(user_data['found_what']))
        except Exception as e:
            logging.error(e)
            await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n–¢—ã –≥–¥–µ-—Ç–æ –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏, –º–æ–∂–µ—Ç —É–∫–∞–∑–∞–ª –¥–∞—Ç—É –Ω–µ –≤–µ—Ä–Ω–æ, –∏–ª–∏ –∫–∏–Ω—É–ª —Ñ–æ—Ç–æ –≥–¥–µ –Ω–µ –Ω—É–∂–Ω–æ", reply_markup=keyb())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await state.set_state(Form.found_what)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            await message.answer("–ß—Ç–æ —Ç—ã –Ω–∞—à–µ–ª? –ù–∞–ø–∏—à–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç.")
    elif message.text.lower() == "–Ω–µ—Ç":
        await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=keyb())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.set_state(Form.found_what)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        await message.answer("–ß—Ç–æ —Ç—ã –Ω–∞—à–µ–ª? –ù–∞–ø–∏—à–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")


@dp.message()
async def wrong(message: Message):
    chat_type = message.chat.type  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if chat_type == "private":
        await message.answer('–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start')


@dp.callback_query()
async def callback(callback: types.CallbackQuery):
    if callback.data.startswith('–í—ã–±–æ—Ä–ø–æ–∏—Å–∫–∞'):
        if callback.data.endswith('–¥–∞—Ç–µ'):
            add_dop("–ü–æ –¥–∞—Ç–µ")
            await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É', reply_markup=calendar_kb())
        elif callback.data.endswith('–ø—Ä–µ–¥–º–µ—Ç—É'):
            add_dop("–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É")
            await callback.message.edit_text(text='–í—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ—Ä—è—à–µ–∫')
            sended = send_data()
            if len(sended) > 0:
                try:
                    for a, b, c in sended:
                        try:
                            await callback.message.answer_photo(c)
                            await callback.message.answer(a, reply_markup=my_kb(b))
                        except aiogram.exceptions.TelegramBadRequest as e:
                            logging.error(e)
                        except Exception as e:
                            logging.error(e)
                    await callback.message.answer("–ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–∏–¥–µ–ª —Ç—É—Ç —Å–≤–æ–µ–π –ø–æ—Ç–µ—Ä—è—à–∫–∏, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏. "
                                                  "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –∏–ª–∏ —Å–∞–º –µ—ë –Ω–∞–π–¥–µ—à—å, –∏–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ç—É—Ç —É –º–µ–Ω—è")
                except ValueError:
                    pass
            else:
                await callback.message.answer('–£–≤—ã, —Ç–≤–æ—é –≤–µ—â—å –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ üòî')

        elif callback.data.endswith('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'):
            add_dop('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            await callback.message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ. –ë–æ—Ç –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å '
                                          '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ª—Å @AMacedonsky', reply_markup=category_kb())
        elif callback.data.endswith('–ù–∞–∑–∞–¥'):
            await callback.message.edit_text(text=f"–ü—Ä–∏–≤–µ—Ç, {hbold(callback.message.from_user.full_name)}!\n—è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–µ—â—å –∏–ª–∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞—Ç—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É")

    elif callback.data.startswith('—á–∞—Ç'):
        if callback.data.endswith('–¥–∞'):
            a = get_item()
            for i in a:
                if i['fields']['–í–µ—â—å'] == callback.data.split(';')[1] and i['fields']['–û–¥–æ–±—Ä–µ–Ω–æ'] == '–Ω–µ—Ç':
                    approve_item(i['id'], ['–û–¥–æ–±—Ä–µ–Ω–æ', '–¥–∞'])
                    text = '‚úÖ –æ–¥–æ–±—Ä–µ–Ω–æ:\n' + callback.message.caption
                    await callback.message.edit_caption('‚úÖ –æ–¥–æ–±—Ä–µ–Ω–æ')
                    await callback.message.answer(text)
                    await callback.message.answer(f"–ó–∞—è–≤–∫—É –æ–¥–æ–±—Ä–∏–ª {callback.from_user.full_name}")
        else:
            a = get_item()
            for i in a:
                if i['fields']['–í–µ—â—å'] == callback.data.split(';')[1] and i['fields']['–û–¥–æ–±—Ä–µ–Ω–æ'] == '–Ω–µ—Ç':
                    delet_id(i['id'])
                    await callback.message.edit_caption('‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:\n' + callback.message.caption)
                    await callback.message.answer('‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:\n' + callback.message.caption)
                    await callback.message.answer(f"–ó–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª {callback.from_user.full_name}")

    elif callback.data.startswith('–ú–û–ï'):
        if callback.data.endswith('–Ω–µ—Ç'):
            await callback.message.edit_text('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ –∑–∞–±–∏—Ä–∞–µ—à—å —á—É–∂–æ–µ ‚ò∫Ô∏è')
            logging.info(f"–ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–µ–Ω {callback.from_user.id}")
        elif callback.data.endswith('–¥–∞'):
            logging.info(f"–ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–µ–Ω {callback.from_user.id}")
            time_count(callback.from_user.id)
            await callback.message.edit_text('–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!\n–ü–æ—Ç–æ–º —è —É —Ç–µ–±—è —É–∑–Ω–∞—é –≤–µ—Ä–Ω—É–ª —Ç—ã –≤–µ—â—å –∏–ª–∏ –Ω–µ—Ç ‚ò∫Ô∏è')
            change_item_info(callback.data.split(';')[-2], str(callback.from_user.id))
            await kindly_reminder(callback.data.split(';')[-2], callback.from_user.id)
        else:
            await callback.message.edit_text(text="–£–í–ï–†–ï–ù", reply_markup=prove_kb(callback.data.split(';')[-1]))

    elif callback.data.startswith('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'):
        logging.info(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ {callback.from_user.id}')
        if callback.data.endswith('–ó–∞–±—Ä–∞–ª'):
            add_dop(f"–ó–∞–∫–æ–Ω—á–µ–Ω –ø–æ–∏—Å–∫ {callback.from_user.id}")
            await callback.message.edit_text('–Ø —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å)')
        elif callback.data.endswith("–ï—â–µ –Ω–µ —É—Å–ø–µ–ª"):
            await callback.message.edit_text('—è –Ω–∞–ø–æ–º–Ω—é –ø–æ–ø–æ–∑–∂–µ)')
            await kindly_reminder(callback.data.split(';')[1], callback.from_user.id)
        elif callback.data.endswith('–í–µ—â—å –Ω–µ –º–æ—è'):
            add_dop("–ó–∞–∫–æ–Ω—á–µ–Ω –ø–æ–∏—Å–∫")
            await callback.message.edit_text('–¢–µ–ø–µ—Ä—å –≤–µ—â—å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤—ã–¥–∞—á–µ, –Ω–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ–µ, –∞ –µ—ë –≤–ª–∞–¥–µ–ª–µ—Ü –µ—ë')
            change_item_info(callback.data.split(';')[1], callback.from_user.id, status='–Ω–µ—Ç')
        else:
            await callback.message.edit_text('–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ  –ø—Ä–æ–±–ª–µ–º–∞,—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º: '
                                             '@AMacedonsky')

    elif callback.data.startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'):
        await callback.message.answer('–ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–µ—â–∏ —Ç–æ–ª—å–∫–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–±—Ä–∞–ª)')
        sended = categoty(callback.data.split(';')[1])
        if len(sended) > 0:
            try:
                for a, b, c in sended:
                    try:
                        await callback.message.answer_photo(c)
                        await callback.message.answer(a, reply_markup=my_kb(b))
                    except Exception as e:
                        logging.error(e)
                        pass
                await callback.message.answer(
                    "–ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–∏–¥–µ–ª —Ç—É—Ç —Å–≤–æ–µ–π –ø–æ—Ç–µ—Ä—è—à–∫–∏, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏. "
                    "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –∏–ª–∏ —Å–∞–º –µ—ë –Ω–∞–π–¥–µ—à—å, –∏–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ç—É—Ç —É –º–µ–Ω—è")
            except Exception as e:
                logging.error(e)
                pass
        else:
            await callback.message.answer('–£–≤—ã, —Ç–≤–æ—é –≤–µ—â—å –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ üòî')

    else:
        query = callback
        await callback.answer(callback.data)
        (_, action, year, month, day) = callback.data.split(';')
        curr = datetime.datetime(int(year), int(month), 1)
        if action == "IGNORE":
            await callback.message.answer(text='help', callback_query_id=callback.id)
        elif action == "DAY":
            await callback.message.edit_text(text='–¢—É—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä –≤–µ—â–µ–π –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç–µ')
            ret_data = True, datetime.date(int(year), int(month), int(day))
            sorted_data = sort_by_data(ret_data)
            if len(sorted_data) > 0:
                try:
                    for a, b, c in sorted_data:
                        try:
                            await callback.message.answer_photo(c)
                            await callback.message.answer(a, reply_markup=my_kb(b))
                        except Exception as e:
                            logging.error(e)
                            pass
                    await callback.message.answer(
                        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–∏–¥–µ–ª —Ç—É—Ç —Å–≤–æ–µ–π –ø–æ—Ç–µ—Ä—è—à–∫–∏, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏. "
                        "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –∏–ª–∏ —Å–∞–º –µ—ë –Ω–∞–π–¥–µ—à—å, –∏–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ç—É—Ç —É –º–µ–Ω—è")
                except aiogram.exceptions.TelegramBadRequest as e:
                    logging.error(e)
                except Exception as e:
                    logging.error(e)
            else:
                await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç –ø–æ—Ç–µ—Ä—è—à–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –≤ –≤—ã–¥–∞—á–µ')

        elif action == "PREV-MONTH":
            pre = curr - datetime.timedelta(days=1)
            await callback.message.edit_text(text=query.message.text, reply_markup=calendar_kb(int(pre.year), int(pre.month)))
        elif action == "NEXT-MONTH":
            ne = curr + datetime.timedelta(days=31)
            await callback.message.edit_text(text=query.message.text, reply_markup=calendar_kb(int(ne.year), int(ne.month)))
        elif action == "–í—ã–±–æ—Ä–ø–æ–∏—Å–∫–∞":
            answer = ('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤–µ—â—å:\n\n'
                      '–ü–æ –¥–∞—Ç–µ: –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ—â–∏, –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã\n'
                      '–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É: –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—Å–µ –≤–µ—â–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n'
                      '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞')
            await callback.message.edit_text(answer, reply_markup=choose_kb())
        else:
            await callback.message.edit_text(callback_query_id=query.id, text="Something went wrong!")


async def kindly_reminder(item, user):
    await asyncio.sleep(3600*2)  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    await bot.send_message(user, '–¢—ã –∑–∞–±—Ä–∞–ª –ø–æ—Ç–µ—Ä—è—à–∫—É? üëãüèΩ', reply_markup=reminder_kb(item))


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    # And the run events dispatching
    await dp.start_polling(bot, on_startup=on_startup)


if __name__ == "__main__":
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler('bot.log')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(levelname)s - %(message)s')
    asyncio.run(main())
# stream=sys.stdout,
# filename='bot.log',
